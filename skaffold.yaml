apiVersion: skaffold/v4beta1
kind: Config
metadata:
  name: lcacollect
build:
  artifacts:
    - image: lcacollect/project
      context: ./modules/project/
      sync:
        infer:
          - 'src/**/*'
          - 'alembic/**/*'
        hooks:
          after:
            - container:
                command:
                  - bash
                  - /app/export_schema.sh
            - host:
                command:
                  - bash
                  - modules/project/extract_schema.sh
                os:
                  - darwin
                  - linux
      docker:
        dockerfile: ./modules/project/Dockerfile
        buildArgs:
          BUILD_STAGE: DEV
          BUILD_VERSION: DEV

    - image: lcacollect/documentation
      context: ./modules/documentation/
      sync:
        infer:
          - 'src/**/*'
          - 'alembic/**/*'
        hooks:
          after:
            - container:
                command:
                  - bash
                  - /app/export_schema.sh
            - host:
                command:
                  - bash
                  - modules/documentation/extract_schema.sh
                os:
                  - darwin
                  - linux
      docker:
        dockerfile: ./modules/documentation/Dockerfile
        buildArgs:
          BUILD_STAGE: DEV
          BUILD_VERSION: DEV

    - image: lcacollect/assembly
      context: ./modules/assembly/
      sync:
        infer:
          - 'src/**/*'
          - 'alembic/**/*'
        hooks:
          after:
            - container:
                command:
                  - bash
                  - /app/export_schema.sh
            - host:
                command:
                  - bash
                  - modules/assembly/extract_schema.sh
                os:
                  - darwin
                  - linux
      docker:
        dockerfile: ./modules/assembly/Dockerfile
        buildArgs:
          BUILD_STAGE: DEV
          BUILD_VERSION: DEV

    - image: lcacollect/rover
      context: ./modules/router
      hooks:
        before:
          - command: [ 'cp', 'modules/documentation/graphql/schema.graphql', './modules/router/schemas/documentation/' ]
            os: [ darwin, linux ]
          - command: [ 'cp', 'modules/project/graphql/schema.graphql', './modules/router/schemas/project/' ]
            os: [ darwin, linux ]
          - command: [ 'cp', 'modules/assembly/graphql/schema.graphql', './modules/router/schemas/assembly/' ]
            os: [ darwin, linux ]
      docker:
        dockerfile: ./modules/router/Dockerfile

manifests:
  helm:
    flags:
      upgrade:
        - --install
    releases:
      - name: project
        chartPath: ./modules/project/helm
        namespace: project
        setValues:
          appDomain: localhost:4205
          appProtocol: http
          backend.servicePort: "8002"
          db.ssl: "false"
          deployType: DEV
          imageKey.registry: lcacollect
          imageKey.repository: project
          imageKey.tag: lastest
        setValueTemplates:
          backend.aadGraphSecret.value: '{{ .AAD_GRAPH_SECRET }}'
          backend.emailSecret.value: '{{ .EMAIL_SECRET }}'
          backend.storageAccountURL.value: '{{ .STORAGE_ACCOUNT_URL }}'
          backend.storageBasePath: test
          backend.storageContainer.value: '{{ .STORAGE_CONTAINER }}'
          backend.storageSecret.value: '{{ .STORAGE_SECRET }}'
          backend.adTenantId: '{{ .AAD_TENANT_ID }}'
          backend.adOpenApiClientId: '{{ .AAD_OPENAPI_CLIENT_ID }}'
          backend.adAppClientId: '{{ .AAD_APP_CLIENT_ID }}'
        createNamespace: true

      - name: assembly
        chartPath: ./modules/assembly/helm
        namespace: assembly
        setValues:
          appDomain: localhost:4205
          appProtocol: http
          backend.servicePort: "8003"
          backend.storageBasePath: test
          db.ssl: "false"
          deployType: DEV
          imageKey.registry: lcacollect
          imageKey.repository: assembly
          imageKey.tag: latest
        setValueTemplates:
          backend.adTenantId: '{{ .AAD_TENANT_ID }}'
          backend.adOpenApiClientId: '{{ .AAD_OPENAPI_CLIENT_ID }}'
          backend.adAppClientId: '{{ .AAD_APP_CLIENT_ID }}'
        createNamespace: true

      - name: documentation
        chartPath: ./modules/documentation/helm
        namespace: documentation
        setValues:
          appDomain: localhost:4205
          appProtocol: http
          backend.servicePort: "8004"
          backend.storageBasePath: test
          db.ssl: "false"
          deployType: DEV
          imageKey.registry: lcacollect
          imageKey.repository: documentation
          imageKey.tag: lastest
        setValueTemplates:
          backend.speckleTokenSecret.value: '{{ .SPECKLE_TOKEN }}'
          backend.storageAccountURL.value: '{{ .STORAGE_ACCOUNT_URL }}'
          backend.storageBasePath: test
          backend.storageContainer.value: '{{ .STORAGE_CONTAINER }}'
          backend.storageSecret.value: '{{ .STORAGE_SECRET }}'
          backend.adTenantId: '{{ .AAD_TENANT_ID }}'
          backend.adOpenApiClientId: '{{ .AAD_OPENAPI_CLIENT_ID }}'
          backend.adAppClientId: '{{ .AAD_APP_CLIENT_ID }}'
        createNamespace: true

      - name: router
        chartPath: ./modules/router/helm
        namespace: router
        setValues:
          assemblyUrl: http://backend-service.assembly:8003/api/graphql
          clientOrigin: http://localhost:4200
          deployType: DEV
          documentationUrl: http://backend-service.documentation:8004/api/graphql
          imageKey.registry: lcacollect/rover
          imageKey.repository: lcacollect/rover
          imageKey.tag: lcacollect/rover
          projectUrl: http://backend-service.project:8002/api/graphql
        createNamespace: true
deploy:
  helm: { }

portForward:
  - resourceType: service
    resourceName: router-service
    namespace: router
    port: 4000

  - resourceType: service
    resourceName: backend-service
    namespace: project
    port: 8002
  - resourceType: service
    namespace: project
    resourceName: database-service
    port: 5432
    localPort: 5433

  - resourceType: service
    resourceName: backend-service
    namespace: assembly
    port: 8003
  - resourceType: service
    resourceName: database-service
    namespace: assembly
    port: 5432
    localPort: 5434

  - resourceType: service
    resourceName: backend-service
    namespace: documentation
    port: 8004
  - resourceType: service
    resourceName: database-service
    namespace: documentation
    port: 5432
    localPort: 5435
